@using TrainningApp.Core.Constants
@using TrainningApp.Core.DTO.User
@using TrainningApp.Core.Entities
@inject NavigationManager Navigation
@inject DbUsers _dbUsers

<MudAutocomplete T="UserVO"
                 Label="Buscar aluno"
                 Value="@selectedUser"
                 ValueChanged="HandleCustomerSelection"
                 ToStringFunc="@(user => user?.Name)"
                 SearchFunc="SearchuCustomer"
                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                 MaxItems="50"
                 CoerceText="@coerceText"
                 CoerceValue="@coerceValue"
                 Class="@(IsLightMode ? "custom-autocompleteLightModeSearch" : "custom-autocompleteSearch")" />







<style>
    /* Estilo para o modo escuro */
    .custom-autocompleteSearch {
        margin-top: -10px; /* Ajuste este valor para mover o componente para cima */
    }

        .custom-autocompleteSearch .mud-input-root,
        .custom-autocompleteSearch .mud-input-label,
        .custom-autocompleteSearch .mud-input-control,
        .custom-autocompleteSearch .mud-input-underline {
            background-color: #2a2a3d !important; /* Cor de fundo para o modo escuro */
            color: white !important; /* Cor do texto */
            border-color: antiquewhite !important; /* Cor da borda */
        }

    /* Estilo para o modo claro */
    .custom-autocompleteSearchLightMode {
        margin-top: -10px; /* Ajuste este valor para mover o componente para cima */
    }

        .custom-autocompleteLightModeSearch .mud-input-root,
        .custom-autocompleteLightModeSearch .mud-input-label,
        .custom-autocompleteLightModeSearch .mud-input-control,
    .custom-autocompleteLightModeSearch .mud-input-underline {
            background-color: #dcdcdc !important; /* Cor de fundo para o modo claro */
            color: black !important; /* Cor do texto */
            border-color: grey !important; /* Cor da borda */
        }
</style>

@code {

    [Parameter]
    public bool IsLightMode { get; set; }

    List<UserVO> users;

    private string customerSelected; // Nome selecionado
    private UserVO selectedUser; // Objeto correspondente ao nome selecionado


    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;

    protected override void OnInitialized()
    {
        List<ApplicationUser> appUsers = _dbUsers.Customers.ToList();
        users = _dbUsers.UsersToDTO(appUsers);
        _dbUsers.OnCustomersChanged += UpdateCustomers;
    }

    protected override void OnParametersSet()
    {
       
    }
    private void UpdateCustomers()
    {
        List<ApplicationUser> appUsers = _dbUsers.Customers.ToList();
        users = _dbUsers.UsersToDTO(appUsers);
        StateHasChanged();
    }
    private async Task OnCustomerSelected(string customer)
    {
        Navigation.NavigateTo("/cliente");
    }

    private void HandleCustomerSelection(UserVO user)
    {
        selectedUser = user;

        if (selectedUser != null)
        {
            string url = Constants.GetUrlForCustomer(user.Id);
            Navigation.NavigateTo(url);
            // Navigation.NavigateTo(url, true);

            Console.WriteLine($"Usuário selecionado: {selectedUser.Name}, Email: {selectedUser.Email}");
        }
    }

    private async Task<IEnumerable<UserVO>> SearchuCustomer(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            // Retorna todos os usuários ordenados pelo nome
            return users.OrderBy(user => user.Name);
        }

        // Filtra os usuários com base no nome
        return users
            .Where(user => user.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(user => user.Name);
    }

    // private async Task<IEnumerable<string>> SearchuCustomer(string value, CancellationToken token)
    // {

    //     if (string.IsNullOrEmpty(value))
    //     {
    //         // return users.Select(x => x.Name);
    //         return users.Select(x => x.Name).OrderBy(name => name);
    //     }
    //     UserVO userSelected = users.Where(x => x.Name == value).FirstOrDefault();
    //     customerSelected = userSelected;

    //     return users.Select(x => x.Name).OrderBy(name => name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    //     StateHasChanged();

    //     // return exerciseList.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));

    // }
    
    // private async Task<IEnumerable<string>> SearchuCustomer(string value, CancellationToken token)
    // {
    //     if (string.IsNullOrEmpty(value))
    //     {
    //         // Retorna todos os nomes ordenados
    //         return users.Select(user => user.Name).OrderBy(name => name);
    //     }

    //     // Filtra os nomes com base no valor digitado
    //     return users
    //         .Where(user => user.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
    //         .Select(user => user.Name)
    //         .OrderBy(name => name);
    // }


        // private async Task<IEnumerable<string>> SearchuCustomer(string value, CancellationToken token)
        // {
        // if (string.IsNullOrEmpty(value))
        // {
        //     // Retorna todos os usuários, convertidos para UserVO, ordenados pelo nome
        //     return users
        //         .OrderBy(user => user.Name)
        //         .Select(user => new UserVO
        //             {
        //                 Id = user.Id,
        //                 Name = user.Name,
        //                 Age = user.Age,
        //                 Gender = user.Gender,
        //                 Email = user.Email,
        //                 Observation = user.Observation,
        //                 Phone = user.Phone,
        //                 Cpf = user.Cpf,
        //                 Goal = user.Goal,
        //                 Birthday = user.Birthday,
        //                 Cep = user.Cep,
        //                 City = user.City,
        //                 Address = user.Address,
        //                 NumberHouse = user.NumberHouse,
        //                 Neighborhood = user.Neighborhood,
        //                 Complement = user.Complement
        //             });
        // }

        // // Filtra os usuários com base no nome e os retorna como UserVO
        // var filteredUsers = users
        //     .Where(user => user.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
        //     .OrderBy(user => user.Name)
        //     .Select(user => new UserVO
        //         {
        //             Id = user.Id,
        //             Name = user.Name,
        //             Age = user.Age,
        //             Gender = user.Gender,
        //             Email = user.Email,
        //             Observation = user.Observation,
        //             Phone = user.Phone,
        //             Cpf = user.Cpf,
        //             Goal = user.Goal,
        //             Birthday = user.Birthday,
        //             Cep = user.Cep,
        //             City = user.City,
        //             Address = user.Address,
        //             NumberHouse = user.NumberHouse,
        //             Neighborhood = user.Neighborhood,
        //             Complement = user.Complement
        //         });

        // return filteredUsers;
        // }


        // private void OnCustomerSelected(UserVO selectedUser)
        // {
        // // Agora você pode acessar todas as propriedades do UserVO
        // customerSelected = selectedUser; // Ou qualquer outra lógica que você queira
        // }


    // List<UserVO> users = new List<UserVO>()
    // {
    //    new UserVO()
    // {
    //     Name = "João",
    //     Age = 32,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Letícia",
    //     Age = 27,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Carlos",
    //     Age = 45,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Mariana",
    //     Age = 22,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Pedro",
    //     Age = 38,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Sofia",
    //     Age = 29,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Gabriel",
    //     Age = 34,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Ana",
    //     Age = 24,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Lucas",
    //     Age = 31,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Camila",
    //     Age = 28,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Ricardo",
    //     Age = 41,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Beatriz",
    //     Age = 26,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Mateus",
    //     Age = 35,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Larissa",
    //     Age = 30,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Felipe",
    //     Age = 39,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Isabela",
    //     Age = 25,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "Thiago",
    //     Age = 37,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Patrícia",
    //     Age = 33,
    //     Gender = "Feminino"
    // },
    // new UserVO()
    // {
    //     Name = "André",
    //     Age = 40,
    //     Gender = "Masculino"
    // },
    // new UserVO()
    // {
    //     Name = "Juliana",
    //     Age = 36,
    //     Gender = "Feminino"
    // }
    // };
}
