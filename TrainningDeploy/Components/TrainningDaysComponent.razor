@page "/drag-and-drop"
@using TrainningApp.Core.DTO.TrainningExercise
@using TrainningApp.Core.Entities
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject DbTrainningExercise _trainningExercise
@inject DbTrainningDay _trainningDay

<br/>


<div style="display: flex; justify-content: center; align-items: center; width: 100%; height: auto;">
@*      <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" Style="margin-right: 10px;">Adicionar Exercício</MudButton>
    <MudButton Disabled=DisableTrainningRemove OnClick="RemoveTrainningDay" Variant="Variant.Filled" Color="Color.Error" Style="margin-right: 10px;">Remover Sessão</MudButton> *@
    <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircleOutline" Style="margin-right: 10px;">Exercício</MudButton>
    <MudButton Disabled=DisableTrainningRemove OnClick="RemoveTrainningDay" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="margin-right: 10px;">Sessão</MudButton>
    @if (exercises == null)
    {
        @* <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" Style="margin-right: 20px;">Adicionar Exercício</MudButton> *@
        <div>
            <h3>Nenhum Exercício Adicionado</h3>
        </div>

    }
</div>



@* <div id="sortable-list" class="sortable-container parent-container" style="display: flex; justify-content: center; align-items: center; width: 100%; height: auto;"> *@

@if (ParameterTrainningExercises == null || ParameterTrainningExercises.Count == 0)
{
    @*    <div>
            <h3>Nenhum Exercício Adicionado</h3>
        </div> *@
    <br />
    <div style="display: flex; justify-content: center; ">
        <MudImage Src="images/no-exercises3.png" Alt="Mony the dog" Elevation="25" Style="max-height: 18%;" />
    </div>



}
<div id="sortable-list" class="sortable-container " style="align-items: center justify-content: center display: flex;">
@* <div > *@
    
    @* <MudTabPanel Text="Treino A" @* Key="@drop.GetHashCode()"> 
     @* <MudTabs @bind-ActivePanelIndex="_selectedTabIndex" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @key="_uniqueKey" Class="dropzone-small"> *@
    @* @foreach (var item in exercises) *@

   

    @if (ParameterTrainningExercises != null)
    {
        @foreach (var item in ParameterTrainningExercises)
        {
            <div style="display: flex; justify-content: center; align-items: center;">
            @* <MudPaper Class="custom-size pa-6 ma-2" data-id="@item.Ordenation" Style="display: flex; align-items: center; gap: 16px; flex-wrap: nowrap; max-width: 100%; width: 100%"> *@
            <MudPaper Class="custom-size pa-6 ma-2" data-id="@item.Id"
                      Style="display: flex; align-items: center; gap: 16px; flex-wrap: nowrap; max-width: 100%; width: 100%; border-radius: 24px;">


                <div class="sortable-handle">
                    <!-- Campo Exercício -->
                    <MudTextField ShrinkLabel @bind-Value="item.ExerciseName"  Label="Exercício" Variant="Variant.Text"
                                   Style="max-width: 300px; height: 32px; font-size: 0.875rem;" />
                 </div>
                 <div class="reps-set">
                 <MudTextField ShrinkLabel @bind-Value="item.Set" Label="Série" Variant="Variant.Text"
                                   Style="max-width: 100px; height: 32px; font-size: 0.875rem;" TextChanged="() => OnChanged(item)" />
                     <MudTextField ShrinkLabel @bind-Value="item.Reps" Label="Rep" Variant="Variant.Text"
                                   Style="max-width: 100px; height: 32px; font-size: 0.875rem;" TextChanged="() => OnChanged(item)" />
                     <div class="extra-fields">
                         <!-- Demais Campos -->

                         <MudTextField ShrinkLabel @bind-Value="item.Weight" Label="Carga" Variant="Variant.Text"
                                       Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                         <MudTextField ShrinkLabel @bind-Value="item.Interval" Label="Intervalo" Variant="Variant.Text"
                                       Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                         <MudTextField ShrinkLabel @bind-Value="item.Info" Label="Info" Variant="Variant.Text"
                                       Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />

                     </div>
                </div>
                
                

                
                 <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                     <MudMenuItem OnClick="() => SelectEditExercise(item)">Editar</MudMenuItem>
                     <MudMenuItem Style="color: red;" OnClick="() => RemoveExercise(item)">Remover</MudMenuItem>
                 </MudMenu>
             </MudPaper>

             </div>
        }


    }
    

   

</div>

<div style="display: flex; justify-content: center; align-items: center;">
    <MudChart ChartType="ChartType.Donut" LegendPosition="@Position.Bottom" Width="300px" Height="300px"
              InputData="@countMuscles.ToArray()" InputLabels="@musclesList.ToArray()">
    </MudChart>
</div>

<!-- Botões Antigos de Editar e Deletar-->
@*     <MudButton Variant="Variant.Filled" Color="Color.Warning"
                            Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px;" OnClick="() => SelectEditExercise(item)">
                     Editar
                 </MudButton>
                 <MudButton Variant="Variant.Filled" Color="Color.Error"
                            Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px;" OnClick="() => RemoveExercise(item)">
                     Deletar
                 </MudButton> *@
@* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/> *@


<style>
    .parent {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
        align-items: stretch; /* Faz com que os itens filhos estiquem verticalmente */
        height: 100%; /* Certifique-se de que o contêiner tenha uma altura definida */
    }


    .responsive-button {
        font-size: 16px; /* Tamanho padrão */
        padding: 8px 16px;
    }

    .menu-item-remove {
        color: red;
        font-weight: bold;
    }

    .reps-set {
        display: flex;
        gap: 8px;
        flex-wrap: nowrap; /* Evita quebra de linha */
        align-items: center; /* Alinha os campos verticalmente */
    }

.extra-fields {
    display: flex;
    gap: 8px;
    flex-wrap: nowrap; /* Evita quebra de linha */
    align-items: center; /* Alinha os campos verticalmente */
}

    .rounded-paper {
        border-radius: 24px; /* Ou o valor que preferir para bordas mais arredondadas */
    }
</style>






@* <button class="btn btn-primary mt-3" @onclick="RefazerOrdem">Refazer Ordem</button> *@

@code {

    [Parameter]
    public bool DisableTrainningRemove { get; set; }

    [Parameter]
    public int ParameterTrainningDay { get; set; }

    [Parameter]
    public int ParameterOrdenation { get; set; }

    [Parameter]
    public List<TrainningExerciseVO> ParameterTrainningExercises { get; set; }

    [Parameter]
    public EventCallback<TrainningExerciseVO> OnEditExercise { get; set; }

    [Parameter]
    public EventCallback OnModification { get; set; }

    [Parameter]
    public EventCallback<int> OnRemoveTrainningDay { get; set; }

    private List<string> muscleNames = new List<string>();

    List<string> musclesList = new List<string>();
    List<double> countMuscles = new List<double>();

    public bool IsToEdited = false;

    public TrainningExerciseVO exerciseToEdited { get; set; }

    public List<TrainningExerciseVO> exercises = new List<TrainningExerciseVO>();

    private DotNetObjectReference<TrainningDaysComponent> _objectReference;
    private MudMenu menuRef;


    private void Action1()
    {
        Console.WriteLine("Opção 1 selecionada");
    }

    private void Action2()
    {
        Console.WriteLine("Opção 2 selecionada");
    }

    private void Action3()
    {
        Console.WriteLine("Opção 3 selecionada");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeSortable", _objectReference);
        }
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }




    private async Task RefazerOrdem()
    {
        // Chama o método JavaScript para refazer a ordem e atualizar a lista
        await JS.InvokeVoidAsync("updateSortableOrder", "sortable-list");
    }

    private void ChartCalculate()
    {
        // musclesList = new List<string>();
        // countMuscles = new List<double>();
        // muscleNames = new List<string>();
        // foreach (var exercise in ParameterTrainningExercises)
        // {
        //     foreach (var muscle in exercise.MuscleName)
        //     {
        //         muscleNames.Add(muscle);
        //     }
        // }
        // muscleNames = muscleNames.Order().ToList();

        // foreach (var muscles in muscleNames)
        // {
        //     if (!musclesList.Contains(muscles))
        //     {

        //         musclesList.Add(muscles);
        //         countMuscles.Add(1);
        //     }
        //     else
        //     {
        //         int index = musclesList.IndexOf(muscles);
        //         countMuscles[index]++;
        //     }

        // }
        var musclesCount = new Dictionary<string, double>();
        musclesList = new List<string>();
        countMuscles = new List<double>();
        foreach (var exercise in ParameterTrainningExercises)
        {
            // var reps = 0;
            // if (!string.IsNullOrEmpty(exercise.Reps) && exercise.Reps.Contains("/"))
            // {
            //     var repsPart = exercise.Reps.Split('/')[0]; // Pega a parte antes do "/"
            //     reps = int.TryParse(repsPart, out var parsedReps) ? parsedReps : 0;
            // }
            // else if (!string.IsNullOrEmpty(exercise.Reps))
            // {
            //     reps = int.TryParse(exercise.Reps, out var parsedReps) ? parsedReps : 0;
            // }
            foreach (var muscle in exercise.MuscleName)
            {
                if (musclesCount.ContainsKey(muscle))
                {
                    // musclesCount[muscle]++;
                    musclesCount[muscle] += musclesCount[muscle] * exercise.Set;
                }
                else
                {
                    musclesCount[muscle] = 1;
                    musclesCount[muscle] = exercise.Set;
                }
            }
        }

        // Ordenar por nome
        var orderedMuscles = musclesCount.OrderBy(x => x.Key).ToList();

        // Separar em listas se necessário
        musclesList = orderedMuscles.Select(x => x.Key).ToList();
        countMuscles = orderedMuscles.Select(x => x.Value).ToList();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        ChartCalculate();
    }

    protected override void OnInitialized()
    {

        ChartCalculate();
        exercises = new List<TrainningExerciseVO>
        {
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino", Info = "Normal", Ordenation = 1 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino reto", Info = "Normal", Ordenation = 2 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino inclinado", Info = "Normal", Ordenation = 3 }
        };
    }

    private void OnChanged(TrainningExerciseVO item)
    {
        _trainningExercise.EditById(item); // Persiste as mudanças
        ChartCalculate();

}


    [JSInvokableAttribute]
    public void UpdateOrdenation(string[] newOrder)
    {
        // Filtra os valores nulos ou vazios
        newOrder = newOrder.Where(item => !string.IsNullOrEmpty(item)).ToArray();

        if (newOrder == null || newOrder.Length == 0)
        {
            Console.WriteLine("Nova ordenação está vazia ou nula.");
            return;
        }

        // Itera sobre o array de nova ordenação
        for (int i = 0; i < newOrder.Length; i++)
        {
            if (int.TryParse(newOrder[i], out int id)) // Assume que `newOrder` contém IDs, não Ordenation
            {
                // Busca o item pelo ID (supondo que o ID seja único)
                var item = ParameterTrainningExercises.FirstOrDefault(x => x.Id == id);
                if (item != null)
                {
                    item.Ordenation = i + 1; // Define a nova ordenação com base no índice do array
                }
                else
                {
                    Console.WriteLine($"Item com ID {id} não encontrado.");
                }
            }
            else
            {
                Console.WriteLine($"Valor inválido no índice {i}: {newOrder[i]}");
            }
        }

        // Reordena a lista na memória com base na nova ordenação
        ParameterTrainningExercises = ParameterTrainningExercises
            .OrderBy(x => x.Ordenation)
            .ToList();

        // Atualiza a interface
        InvokeAsync(StateHasChanged);
    }




    private async Task OpenDialog()
    {
        var parameters = new DialogParameters
    {
        { "EditExercise", exerciseToEdited },
        {"EditExibition", IsToEdited}// Passa o exercício existente ou null
    };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = exerciseToEdited == null ? DialogService.Show<ExerciseComponent>("Adicionar Exercício", parameters, options) :
        DialogService.Show<ExerciseComponent>("Editar Exercício", parameters, options);

        var result = await dialog.Result;
        // if (result.Canceled) return;
        if (!result.Canceled)
        {
            // Obtenha o exercício adicionado a partir do diálogo
            var addedExercise = (TrainningExerciseVO)result.Data;
            if (addedExercise == null) return;
            addedExercise.TrainningDayId = ParameterTrainningDay;

            // if (!IsToEdited) addedExercise.Ordenation = ParameterOrdenation + 1;
            // if (IsToEdited) addedExercise.Ordenation = ParameterOrdenation;
            // Chame o método para adicionar o exercício ao componente pai
            // DropZoneItem dropItem = new DropZoneItem()
            //     {
            //         Name = ParameterNameZone,
            //         Exercise = addedExercise,
            //         Zone = "Drop Zone 1"

            //     };
            // if (!IsToEdited) await AddExercise(dropItem);
            // else if (IsToEdited) await EditExercise(dropItem);

            // EditListExercise(exercises);

            if (IsToEdited)
            {
                _trainningExercise.EditById(addedExercise);
            }
            if (!IsToEdited)
            {
                TrainningDay trainningDay = _trainningDay.TrainningDays.Where(x => x.Id == ParameterTrainningDay).FirstOrDefault();
                int trainningExerciseId = _trainningExercise.AddNewExercise(addedExercise, trainningDay);
                _trainningDay.AddNewExercise(ParameterTrainningDay, trainningExerciseId);

            }

            IsToEdited = false;
            OnModification.InvokeAsync();
        }

    }

    private void SelectEditExercise(TrainningExerciseVO exercise)
    {
        exerciseToEdited = exercise;
        IsToEdited = true;
        OpenDialog();
        exerciseToEdited = null;
        return;
    }

    private async Task RemoveExercise(TrainningExerciseVO exercise)
    {
        _trainningExercise.RemoveById(exercise.Id);
        await OnModification.InvokeAsync();
        ChartCalculate();
        StateHasChanged();
    }

    private async Task RemoveTrainningDay()
    {
        // int trainningDayId = ParameterTrainningExercises.FirstOrDefault().TrainningDayId;
        await OnRemoveTrainningDay.InvokeAsync(ParameterTrainningDay);
    }
    //     private async Task EditListExercise(List<TrainningExerciseVO> trainningExerciseVOs)
    // {
    //     // Chame o callback passando o exercício adicionado
    //     await OnEditExercise.InvokeAsync(trainningExerciseVOs);
    // }

   private void AddNewTrainningDay()
    {
    //     string letter = DropzoneList.Select(x => x.Select(x => x.Name)).Last().FirstOrDefault();
    //     // char currentLetter = 'C';
    //     char currentLetter = letter[0];
    //     char nextLetter = (char)(currentLetter + 1);
    //     DropzoneList.Add(new List<DropZoneItem>
    // {
    //     new DropZoneItem
    //     {
    //         Zone = "Drop Zone 1",
    //         TrainningDayOrdenation = 3,
    //         TrainningDayId = 3,
    //         // Name = "C",
    //         Name = nextLetter.ToString(),

    //     }
    // });
        // _uniqueKey++;
    }
}
