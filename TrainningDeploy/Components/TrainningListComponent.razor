@page "/treinos"
@inject DbTrainning _dbTrainning



@using TrainningApp.Core.Constants
@using TrainningApp.Core.DTO.Trainning
@using TrainningApp.Core.DTO.TrainningDay
@using TrainningApp.Core.Entities
@inject NavigationManager Navigation
@inject IDialogService DialogService

<div style="display: flex; justify-content: center; margin-top: 20px;">
    <MudButton OnClick="OndAddTrainning" Variant="Variant.Filled" Color="Color.Success">Novo Treino</MudButton>
</div>
<br />
<br />



<div style="display: flex; justify-content: center; padding: 10px;">
    <MudPaper Class="custom-size" Width="75%" Style="padding: 20px; display: flex; flex-direction: column; position: relative; overflow-y: auto; box-sizing: border-box;">
        @foreach (var trainning in trainningsList)
        {
            <!-- Contêiner externo para hover e MudDivider -->
            <div class="hover-container"
                 Style="transition: background-color 0.3s ease; padding: 0; margin-bottom: 2px; cursor: pointer;">

                <MudGrid AlignItems="AlignItems.Center" Class=" profile-container" Style="padding: 30px 30px;">
                    <!-- Nome e alertas -->
                    <MudItem Class="profile-text" Style="width: 100%;">

                        <!-- Contêiner de nome e ícones alinhados -->
                        <MudGrid Style="margin-bottom: 4px; display: flex; justify-content: space-between; align-items: center;">
                            <!-- Nome do treino -->
                            <MudText Typo="Typo.h6" Class="font-weight-bold">
                                @if (string.IsNullOrEmpty(trainning.Name))
                                {
                                    <MudText Typo="Typo.h6" Class="font-weight-bold">Treino sem nome</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.h6" Class="font-weight-bold"> @trainning.Name</MudText>
                                   
                                }
                            </MudText>

                            <!-- Ícones de ação alinhados à direita -->
                            <div class="action-icons" Style="display: flex; gap: 8px;">
                                <MudIconButton OnClick="() => NavigateToEditing(trainning.Id)" Icon="@Icons.Material.Outlined.Edit" />
                                <MudIconButton OnClick="() => DeleteDialogAsync(trainning)" Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                            </div>
                        </MudGrid>

                        <!-- Alertas -->
                        <MudGrid Item Class="d-flex align-items-center" Style="gap: 8px; margin: 0;">
                            @if (string.IsNullOrEmpty(trainning.Gender))
                            {
                                <MudAlert NoIcon="true" Severity="Severity.Info" HideIcon="true" Square="false"
                                          Style="border-radius: 8px; padding: 3px 6px; font-size: 13px; line-height: 1;">
                                    @trainning.Gender
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(trainning.PersonalName))
                            {
                                <MudAlert NoIcon="true" Severity="Severity.Info" HideIcon="true" Square="false"
                                          Style="border-radius: 8px; padding: 3px 6px; font-size: 13px; line-height: 1;">
                                    @trainning.PersonalName
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(trainning.Goal))
                            {
                                <MudAlert NoIcon="true" Severity="Severity.Info" HideIcon="true" Square="false"
                                          Style="border-radius: 8px; padding: 3px 6px; font-size: 13px; line-height: 1;">
                                    @trainning.Goal
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(trainning.Level))
                            {
                                <MudAlert NoIcon="true" Severity="Severity.Info" HideIcon="true" Square="false"
                                          Style="border-radius: 8px; padding: 3px 6px; font-size: 13px; line-height: 1;">
                                    @trainning.Level
                                </MudAlert>
                            }
                            @if (trainning.TrainningDays != null)
                            {
                                <MudAlert NoIcon="true" Severity="Severity.Info" HideIcon="true" Square="false"
                                          Style="border-radius: 8px; padding: 3px 6px; font-size: 13px; line-height: 1;">
                                    @trainning.TrainningDays.Count Sessões
                                </MudAlert>
                            }
                        </MudGrid>
                    </MudItem>
                </MudGrid>

                <!-- Divisor alinhado com menos espaço -->
                <MudDivider Class="mt-0" Style="margin-top: -2px;" />
            </div>
        }
    </MudPaper>
</div>


<style>


     .profile-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%; /* Garante que o MudGrid ocupe 100% da largura disponível */
        box-sizing: border-box; /* Garante que o padding do MudPaper não afete o layout */
        position: relative; /* Evita deslocamento inesperado */
    }
       .custom-size {
        width: 75%;
        max-width: 100%;
        transition: width 0.3s ease;
        box-sizing: border-box; /* Garante que o padding não afete o tamanho */
    }

    /* Oculta os ícones inicialmente */
    .hover-container .action-icons {
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease, visibility 0.3s ease;

    }

    /* Mostra os ícones quando em hover */
    .hover-container:hover .action-icons {
        visibility: visible;
        opacity: 1;
    }
    .hover-container {
        background-color: transparent; /* Sem fundo inicial */
    }

        .hover-container:hover {
            /* background-color: #2a2a3d; /* Ajuste a cor conforme necessário */ 
            background-color: rgba(42, 42, 61, 0.2);

            cursor: pointer;
        }
.hover-container .mud-divider {
            background-color: #e0e0e0; /* Ajuste a cor do divisor conforme necessário */
        }

    .profile-container.hoverable {
        background-color: transparent; /* Sem fundo padrão */
    }

        .profile-container.hoverable:hover {
            background-color: #f5f5f5; /* Cor de destaque no hover */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra leve opcional */
            transition: background-color 0.3s ease;
        }

    .profile-container .mud-grid {
        margin-bottom: 0 !important;
    }

    .profile-container .mud-alert {
        margin-bottom: 0 !important;
    }

    .profile-container .mud-divider {
        margin-top: 4px !important;
        margin-bottom: 0 !important;
    }
</style>


@code {
    List<TrainningReturnVO> trainningsList = new List<TrainningReturnVO>();

    private void NavigateToEditing(int trainningId)
    {
        string url = Constants.GetUrlForTrainningLibrary(trainningId);
        Navigation.NavigateTo(url);
    }

    protected override void OnInitialized()
    {
        trainningsList = new List<TrainningReturnVO>();
        trainningsList = _dbTrainning.TrainningListToTrainningVOList(_dbTrainning.Trainnings.Where(x => x.IsLibrary == true).ToList());
    }

    private async Task DeleteDialogAsync(TrainningReturnVO trainningToRemove)
    {
        var parameters = new DialogParameters
    {
        { nameof(DialogRemove.ContentText), "Você quer realmente apagar esse treino?" },
        { nameof(DialogRemove.ButtonText), "Deletar" },
        { nameof(DialogRemove.Color), Color.Error }
    };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        // Exibe o diálogo e aguarda o resultado
        var dialogReference = DialogService.Show<DialogRemove>("Deletar", parameters, options);

        var dialogResult = await dialogReference.Result; // Aguarda até o usuário interagir com o diálogo

        // Verifica se o resultado foi cancelado
        if (dialogResult.Canceled)
        {

            Console.WriteLine("Ação cancelada.");
        }
        else
        {
            Trainning trainning = _dbTrainning.Trainnings.Where(x => x.Id == trainningToRemove.Id).FirstOrDefault();
            _dbTrainning.Trainnings.Remove(trainning);
            trainningsList = _dbTrainning.TrainningListToTrainningVOList(_dbTrainning.Trainnings.Where(x => x.IsLibrary == true).ToList());
        }
    }


    private void OndAddTrainning()
    {

        TrainningReturnVO newTrainning = _dbTrainning.AddNewTrainning(null, true);
        // TrainningEditing = newTrainning;
        string url = Constants.GetUrlForTrainningLibrary(newTrainning.Id);
        Navigation.NavigateTo(url);
    }
    // {
//     new TrainningReturnVO()
//     {
//         Goal = "Musculação",
//         Level = "Intermediário",
//         Name = "ABC",
//         PersonalName = "João Paulo",
//         Gender = "Masculino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "A",
//                 Ordenation = 1,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Perda de Peso",
//         Level = "Iniciante",
//         Name = "Definição",
//         PersonalName = "Mariana Silva",
//         Gender = "Feminino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "B",
//                 Ordenation = 2,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Hipertrofia",
//         Level = "Avançado",
//         Name = "Push Pull Legs",
//         PersonalName = "Carlos Oliveira",
//         Gender = "Masculino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "C",
//                 Ordenation = 3,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Flexibilidade",
//         Level = "Intermediário",
//         Name = "Yoga",
//         PersonalName = "Ana Clara",
//         Gender = "Feminino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "D",
//                 Ordenation = 4,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Cardio",
//         Level = "Iniciante",
//         Name = "Corrida",
//         PersonalName = "Lucas Souza",
//         Gender = "Masculino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "E",
//                 Ordenation = 5,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Funcional",
//         Level = "Avançado",
//         Name = "CrossFit",
//         PersonalName = "Beatriz Santos",
//         Gender = "Feminino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "F",
//                 Ordenation = 6,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Reabilitação",
//         Level = "Intermediário",
//         Name = "Fisioterapia",
//         PersonalName = "Thiago Costa",
//         Gender = "Masculino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "G",
//                 Ordenation = 7,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Musculação",
//         Level = "Iniciante",
//         Name = "Full Body",
//         PersonalName = "Camila Alves",
//         Gender = "Feminino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "H",
//                 Ordenation = 8,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Definição",
//         Level = "Avançado",
//         Name = "HIIT",
//         PersonalName = "Felipe Lima",
//         Gender = "Masculino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "I",
//                 Ordenation = 9,
//             }
//         }
//     },
//     new TrainningReturnVO()
//     {
//         Goal = "Endurance",
//         Level = "Intermediário",
//         Name = "Triathlon",
//         PersonalName = "Juliana Freitas",
//         Gender = "Feminino",
//         TrainningDays = new List<TrainningDayReturnVO>()
//         {
//             new TrainningDayReturnVO
//             {
//                 Name = "J",
//                 Ordenation = 10,
//             }
//         }
//     }
// };

//     }
}
