@page "/musculos"
@using TrainningApp.Core.DTO.Muscle
@using TrainningApp.Core.Entities
@inject DbMusclesAndExercises DbMusclesAndExercises
@inject NavigationManager Navigation
@inject IDialogService DialogService


<div style="display: flex; justify-content: center; margin-top: 20px;">
    <MudButton OnClick="OpenAddDialog" Variant="Variant.Filled" Color="Color.Success">Novo Músculo</MudButton>
</div>
<br />
<br />
<div style="display: flex; justify-content: center; padding: 10px;">
    <MudPaper Class="custom-size" Width="75%" Style="padding: 20px; display: flex; flex-direction: column; position: relative; overflow-y: auto; box-sizing: border-box;">
        @foreach (var muscle in musclesList)
        {
            <!-- Contêiner externo para hover e MudDivider -->
            <div class="hover-container"
                 Style="transition: background-color 0.3s ease; padding: 0; margin-bottom: 2px; cursor: pointer;">

                <MudGrid AlignItems="AlignItems.Center"
                         Class="profile-container"
                         Style="padding: 25px 30px 5px 30px; display: flex; align-items: center; flex-wrap: nowrap;">
                    <!-- Nome do músculo -->
                    <MudText Typo="Typo.h6" Class="font-weight-bold" 
                             Style="flex-grow: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @muscle.Name
                    </MudText>

                    <!-- Botões de ação -->
                    <div class="action-icons" Style="display: flex; margin-left: auto;">
                        <MudIconButton OnClick="()=>OpenEditDialog(muscle)" Icon="@Icons.Material.Outlined.Edit" Style="margin-left: 16px;" />
                        <MudIconButton OnClick="()=>Delete(muscle)" Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                    </div>
                </MudGrid>

                <!-- Divisor alinhado -->
                <MudDivider Class="mt-0" Style="margin-top: -2px;" />
            </div>
        }
    </MudPaper>
</div>



<style>

     .custom-size {
        width: 75%;
        max-width: 100%;
        transition: width 0.3s ease;
        box-sizing: border-box; /* Garante que o padding não afete o tamanho */
    }

    /* Oculta os ícones inicialmente */
    .hover-container .action-icons {
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    /* Mostra os ícones quando em hover */
    .hover-container:hover .action-icons {
        visibility: visible;
        opacity: 1;
    }
    .hover-container {
        background-color: transparent; /* Sem fundo inicial */
    }

      @*   .hover-container:hover {
            background-color: #2a2a3d; /* Cor de destaque no hover */
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Sombra opcional */
        } *@
        .hover-container:hover {
            /* background-color: #2a2a3d; /* Ajuste a cor conforme necessário */ 
            background-color: rgba(42, 42, 61, 0.2);

            cursor: pointer;
        }

        .hover-container .mud-divider {
            background-color: #e0e0e0; /* Ajuste a cor do divisor conforme necessário */
        }

    .profile-container.hoverable {
        background-color: transparent; /* Sem fundo padrão */
    }

        .profile-container.hoverable:hover {
            background-color: #f5f5f5; /* Cor de destaque no hover */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra leve opcional */
            transition: background-color 0.3s ease;
        }

    .profile-container .mud-grid {
        margin-bottom: 0 !important;
    }

    .profile-container .mud-alert {
        margin-bottom: 0 !important;
    }

    .profile-container .mud-divider {
        margin-top: 4px !important;
        margin-bottom: 0 !important;
    }
</style>


@code {
    List<MuscleVO> musclesList = new List<MuscleVO>();

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        var parameters = new DialogParameters();

        var dialog = DialogService.Show<NewMuscleDialogComponent>("Criar novo músculo", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var selectedMuscle = (MuscleVO)result.Data;  // Substitua "Muscle" pelo tipo correto que o diálogo deve retornar
            if(selectedMuscle != null)
            {
                musclesList = DbMusclesAndExercises.MuscleToDTO();
            }
            Console.WriteLine($"Músculo Selecionado: {selectedMuscle.Name}, ID: {selectedMuscle.Id}");
        }
        else
        {
            Console.WriteLine("O diálogo foi cancelado.");
        }
    }

    private async Task OpenEditDialog(MuscleVO muscleToEdit)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        var parameters = new DialogParameters()
        {
         {"MuscleVOToEdit",muscleToEdit }
        };

        var dialog = DialogService.Show<NewMuscleDialogComponent>("Editar músculo", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var selectedMuscle = (MuscleVO)result.Data;  // Substitua "Muscle" pelo tipo correto que o diálogo deve retornar
            if(selectedMuscle != null)
            {
                musclesList = DbMusclesAndExercises.MuscleToDTO();
            }
            Console.WriteLine($"Músculo Selecionado: {selectedMuscle.Name}, ID: {selectedMuscle.Id}");
        }
        else
        {
            Console.WriteLine("O diálogo foi cancelado.");
        }
    }

    private void Delete(MuscleVO muscleVO)
    {
        Muscle muscle = DbMusclesAndExercises.Muscles.Where(x => x.Id == muscleVO.Id).FirstOrDefault();
        DbMusclesAndExercises.Muscles.Remove(muscle);
         musclesList = DbMusclesAndExercises.MuscleToDTO();
    }
    protected override void OnInitialized()
    {
        musclesList = DbMusclesAndExercises.MuscleToDTO();

    }
}
