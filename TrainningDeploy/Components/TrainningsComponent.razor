@using TrainningApp.Core
@using TrainningApp.Core.Constants
@using TrainningApp.Core.DTO.Trainning
@using TrainningApp.Core.DTO.TrainningDay
@using TrainningApp.Core.DTO.TrainningExercise
@using TrainningApp.Core.Entities
@using TrainningDeploy.Pages
@inject IDialogService DialogService
@inject DbTrainning _trainning
@* @inject DbUsers dbUsers
@inject DbTrainningDay trainningDay
@inject DbTrainningExercise trainningExercise *@
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

@page "/aluno/{UserId}/treinos"


<CustomerInfoComponent ActiveIndex=1 UserId="@UserId"></CustomerInfoComponent>

@if(AddTrainning == false && EditTrainning == false)
{
    <br />  
    <div style="display: flex; justify-content: center;">
        <MudPaper Width="250px" Class="py-3" Elevation="0">
            <MudNavMenu Dense>
             <MudNavGroup Title="Adicionar Treino" Expanded="false">
                 <MudNavLink OnClick="@(() => OndAddTrainning())">Novo Treino</MudNavLink>
                 <MudNavLink OnClick="@(() => GoTo("Adicionar Treino/Security"))">Biblioteca de Treinos</MudNavLink>
                 <MudNavLink OnClick="@(() => OpenUserSelectionDialog())">Utilizar de outro aluno</MudNavLink>
             </MudNavGroup>
         </MudNavMenu>
     </MudPaper>
        @* <MudButton OnClick="() => OndAddTrainning()" Variant="Variant.Filled" Color="Color.Success">Novo Treino</MudButton> *@
    </div>
    <br />
    <br />
    <br />
    @foreach (TrainningReturnVO trainning in TrainningsList)
    {
        <div style="display: flex; justify-content: center; margin-bottom: 10px;">
            <MudPaper Height="220px" Class="custom-size" Width="75%" Style="padding: 20px; display: flex; flex-direction: column; position: relative; overflow: hidden; box-sizing: border-box;">
                <MudText Typo="Typo.h4" Style="margin-bottom: 15px;">@trainning.Name</MudText>
                    <MudDivider Style="height: 6px; margin-bottom: 15px;" />

                    <MudText Style="margin-bottom: 10px;">
                        <span class="bold-label">Responsável:</span>
                        <span class="normal-text">@trainning.PersonalName</span>
                </MudText>

                <MudText Style="margin-bottom: 10px;">
                    <span class="bold-label">Objetivo:</span>
                    <span class="normal-text">@trainning.Goal</span>
                </MudText>

                <!-- Alinhamento horizontal de "Criado em" e MudAlert -->
                <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                    <MudText>
                        <span class="bold-label">Criado em:</span>
                        <span class="normal-text">@trainning.CreatedAt.ToString("dd/MM/yyyy")</span>
                    </MudText>
                    @if (trainning.Activate)
                    {
                        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" NoIcon="true" Dense="true" Class="custom-alert">
                            Ativo
                        </MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" NoIcon="true" Dense="true" Class="custom-alertPurple">
                            Desativado
                        </MudAlert>

                   

                    }
                 
                </div>

                <!-- Botões alinhados à direita e mais para cima -->
                <div style="position: absolute; right: 20px; top: 10px; display: flex; flex-direction: column; align-items: flex-end;">
                    @* <MudFab OnClick="()=> OnEditTrainning(trainning)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Style="margin-bottom: 10px;" /> *@
                    @* <MudFab OnClick="()=> OnEditTrainning(trainning)" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Style="margin-bottom: 10px;" /> *@
                    <MudIconButton OnClick="()=> OnEditTrainning(trainning)" Icon="@Icons.Material.Outlined.Edit" />
                        <br/>
                        <br/>
                    
                    <MudIconButton OnClick="()=> DeleteDialogAsync(trainning)" Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                </div>
            </MudPaper>
        </div>



        <style>
            .custom-alertPurple {
                background-color: #6a0dad; /* Roxo personalizado */
                color: white; /* Texto branco para contraste */
                border-radius: 8px; /* Opcional: bordas arredondadas */
            }
            .custom-alert {
                border-radius: 10px; /* Bordas arredondadas maiores */
                font-size: 0.9rem;
                white-space: nowrap; /* Impede quebras de linha no alerta */
                padding: 5px 10px; /* Aumenta a área do alerta */
                box-sizing: border-box; /* Garante que o padding não ultrapasse os limites */
            }

            .bold-label {
                font-weight: bold;
            }

            .normal-text {
                font-size: 0.9rem;
            }
        </style>


        <style>
            .custom-alert {
                border-radius: 8px;
                font-size: 0.8rem;
                white-space: nowrap; /* Impede quebra de linha no texto do alerta */
            }

            .bold-label {
                font-weight: bold;
            }

            .normal-text {
                font-size: 0.9rem;
            }
        </style>


        <style>
            .custom-alert {
                border-radius: 8px;
                font-size: 0.8rem;
            }
        </style>


        <style>
            .custom-alert {
                border-radius: 8px;
                font-size: 0.8rem; /* Ajustar o tamanho do texto do alerta */
            }
        </style>


    }
}
@if (AddTrainning == true || EditTrainning == true)
{
   
   @*  <TrainningInfoBasicComponent Trainning="TrainningEditing"></TrainningInfoBasicComponent>  *@
    <TrainningComponent TrainningToUpdateOrCreate="UpdateOrCreateTrainning" TrainningToEdit="TrainningEditing"></TrainningComponent>
}

<style>
    .bold-label {
        font-weight: bold;
    }

    .normal-text {
        font-weight: normal;
    }

</style>

@code {
    private void GoTo(string page) => Snackbar.Add($"Clicked {page}");
    [Parameter]
    public List<TrainningReturnVO> TrainningsList { get; set; } 

    [Parameter]
    public string UserId { get; set; }


    private async Task OpenUserSelectionDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        // var parameters = new DialogParameters();
        var parameters = new DialogParameters
    {
        { "UserId", UserId }

    };

        var dialog = DialogService.Show<NewTrainningByUserComponent>("Selecionar Usuário", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // SelectedUser = (UserVO)result.Data;
            // Console.WriteLine($"Usuário Selecionado: {SelectedUser.Name}, ID: {SelectedUser.Id}");
        }
    }


    private async Task DeleteDialogAsync(TrainningReturnVO trainning)
    {
        var parameters = new DialogParameters
    {
        { nameof(DialogRemove.ContentText), "Você quer realmente apagar esse treino?" },
        { nameof(DialogRemove.ButtonText), "Deletar" },
        { nameof(DialogRemove.Color), Color.Error }
    };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        // Exibe o diálogo e aguarda o resultado
        var dialogReference = DialogService.Show<DialogRemove>("Deletar", parameters, options);

        var dialogResult = await dialogReference.Result; // Aguarda até o usuário interagir com o diálogo

        // Verifica se o resultado foi cancelado
        if (dialogResult.Canceled)
        {
            Console.WriteLine("Ação cancelada.");
        }
        else
        {
            Console.WriteLine("Ação confirmada. Excluindo treino...");
            OnDeleteTrainning(trainning); // Executa a ação de exclusão
        }
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (TrainningEditing != null)
    //     {
    //         TrainningEditing = _trainning.GetById(TrainningEditing.Id);
    //     }

    // }


    // TrainningReturnVO trainning = new TrainningReturnVO();
    private TrainningReturnVO TrainningEditing { get; set; }
    // List<TrainningReturnVO> trainningsList = new List<TrainningReturnVO>();


    private void UpdateOrCreateTrainning(TrainningReturnVO trainningToSave)
    {
        if (trainningToSave.Activate)
        {
            foreach (var item in TrainningsList.Where(x => x.Activate))
            {
                if (trainningToSave.Id != item.Id) item.Activate = false;
                // Altera o valor para false
            }
        }
        if (trainningToSave.Id != 0)
        {
            var trainningToUpdate = TrainningsList.FirstOrDefault(x => x.Id == trainningToSave.Id);
            if (trainningToUpdate != null)
            {
                // Atualizar as propriedades do item encontrado
                trainningToUpdate.Name = trainningToSave.Name;
                trainningToUpdate.Goal = trainningToSave.Goal;
                trainningToUpdate.FrequencyWeekly = trainningToSave.FrequencyWeekly;
                trainningToUpdate.Observation = trainningToSave.Observation;
                trainningToUpdate.PersonalName = trainningToSave.PersonalName;
                trainningToUpdate.Activate = trainningToSave.Activate;
                trainningToUpdate.TrainningDays = trainningToSave.TrainningDays;

                // Se precisar de algo mais, adicione aqui, como salvar ou outras atualizações
            }
        }
        else
        {
            trainningToSave.Id = TrainningsList.Count + 1;
            TrainningsList.Add(trainningToSave);
        }
        EditTrainning = false;
        AddTrainning = false;
        TrainningsList = TrainningsList.OrderByDescending(x => x.CreatedAt).ToList();
    }

    private bool AddTrainning { get; set; } = false;
   
    
    private bool EditTrainning { get; set; } = false;
    protected override void OnInitialized()
    {


        TrainningsList = _trainning.GetByCustomerId(UserId);


    }

    private void OnDeleteTrainning(TrainningReturnVO trainningToDelete)
    {
        TrainningReturnVO toDelete = TrainningsList.Where(x => x == trainningToDelete).FirstOrDefault();
        if (toDelete != null) TrainningsList.Remove(toDelete);
        // _trainning.RemoveById(trainningToDelete.Id);

    }

    private void OndAddTrainning()
    {
        // TrainningEditing = null;
        // AddTrainning = true;
        TrainningReturnVO newTrainning = _trainning.AddNewTrainning(UserId);
        // TrainningEditing = newTrainning;
         string url = Constants.GetUrlForTrainning(UserId, newTrainning.Id);
        Navigation.NavigateTo(url);
    }

    private void OnEditTrainning(TrainningReturnVO trainningToEdit)
    {
        string url = Constants.GetUrlForTrainning(UserId, trainningToEdit.Id);
        Navigation.NavigateTo(url);
        // TrainningEditing = trainningToEdit;
        // EditTrainning = true;
    }
}
