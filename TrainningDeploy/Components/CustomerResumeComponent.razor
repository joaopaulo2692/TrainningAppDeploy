@using TrainningApp.Core.DTO.Trainning
@using TrainningApp.Core.DTO.User
@using TrainningApp.Core.Entities
@page "/aluno/{UserId}"
@page "/personal/{UserId}"
@inject DbUsers _dbUsers
@inject NavigationManager NavigationManager

@if (IsCustomer)
{
    <CustomerInfoComponent ActiveIndex=0 UserId="@UserId"></CustomerInfoComponent>
}

<br />
<br />
<div class="parent-container">
<h2>Dados do Usuário</h2>
</div>
<div class="parent-container">
    <MudPaper Class="pa-8 ma-2 custom-size custom-padding" Elevation="3">
        <MudGrid>
            <!-- Linha 1: Nome, CPF e Telefone -->
  
            <MudItem xs="6" sm="4">
                <MudTextField Required=true HelperText="@(hasError ? errorMessageName : null)" RequiredError="Requerido"
                              Error="@hasError" T="string" Label="Nome" @bind-Value="UserSelected.Name" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
           @*  @if (hasError)
            {
                <MudText Color="Color.Error" Typo="Typo.caption">@errorMessageName</MudText>
            } *@
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="CPF" @bind-Value="UserSelected.Cpf" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudDatePicker Label="Data Nascimento" Date="UserSelected.Birthday"  DateChanged="OnChangedDate" />
            </MudItem>
           

            <!-- Linha 2: Data Nascimento, Objetivo e Email -->
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Telefone" @bind-Value="UserSelected.Phone" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudSelect Label="Objetivo" @bind-Value="UserSelected.Goal" TextChanged="OnChanged">
                    @foreach (var state in typesTrainningList)
                    {
                        <MudSelectItem Value="state">@state</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Email" @bind-Value="UserSelected.Email" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>

            <!-- Linha 3: MudSwitch -->
            <!-- Linha 4: Observação -->
            <MudItem xs="12">
                <MudTextField T="string" Label="Observação" @bind-Value="UserSelected.Observation" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
<br />
<br />
<div class="parent-container">
    <h2>Endereço</h2>
</div>
<div class="parent-container">
    <MudPaper Class="pa-8 ma-2 custom-size custom-padding" Elevation="3">
        <MudGrid>
            <!-- Linha 1: CEP, Logradouro, Número -->
            <MudItem xs="6" sm="4">
                <MudTextField Label="CEP" @bind-Value="UserSelected.Cep" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Logradouro" @bind-Value="UserSelected.Address" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudTextField T="int" Label="Número" @bind-Value="UserSelected.NumberHouse" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>

            <!-- Linha 2: Complemento, Bairro, Cidade -->
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Complemento" @bind-Value="UserSelected.Complement" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Bairro" @bind-Value="UserSelected.Neighborhood" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudTextField T="string" Label="Cidade" @bind-Value="UserSelected.City" Typo="Typo.input" TextChanged="OnChanged" />
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>

<style>
    .custom-padding {
        padding-left: 16px !important; /* Menor padding à esquerda */
        padding-right: 16px !important; /* Menor padding à direita */
        padding-top: 16px !important; /* Padding superior */
        padding-bottom: 22px !important; /* Padding inferior */
    }

    .custom-size {
        max-width: 1100px; /* Ajuste a largura máxima conforme necessário */
        width: 100%; /* Para garantir que o MudPaper seja responsivo */
        margin-left: auto; /* Centraliza o componente horizontalmente */
        margin-right: auto; /* Centraliza o componente horizontalmente */
    }

    .parent-container {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
    }
</style>


<style>
    .custom-padding {
        padding-left: 16px !important; /* Menor padding à esquerda */
        padding-right: 16px !important; /* Menor padding à direita */
        padding-top: 16px !important; /* Padding superior */
        padding-bottom: 22px !important; /* Padding inferior */
    }

    .custom-size {
        max-width: 1100px; /* Ajuste a largura máxima conforme necessário */
        width: 100%; /* Para garantir que o MudPaper seja responsivo */
        margin-left: auto; /* Centraliza o componente horizontalmente */
        margin-right: auto; /* Centraliza o componente horizontalmente */
    }

    .parent-container{
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
    }
</style>


@code {
    string link = "https://localhost:7142";
    // private bool IsCustomer => NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == link + $"/aluno/{UserId}";
    private bool IsCustomer => NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Contains("aluno");
    [Parameter]
    public string? UserId { get; set; }

    [Parameter]
    public UserVO UserSelected { get; set; }

    private MudForm form;
    private bool hasError = false;
    private string errorMessageName = "Nome é obrigatório!";
    List<TrainningReturnVO> trainningVO;
    // private string name;
    // private string email;
    // private string observation;
    // private string phone;
    // private string cpf;
    private string goal;
    private DateTime? birthDay;

    // private string cep;
    // private string logradouro;
    // private string numero;
    // private string complemento;
    // private string bairro;
    // private string cidade;

    private List<string> typesTrainningList = new List<string>()
    {
        "Hipertrofia", "Emagrecimento", "Condicionamento", "Funcional"
    };

    protected override void OnInitialized()
    {
        // string uri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        // link = link + uri;
        if (IsCustomer)
        {
            UserSelected = _dbUsers.GetCustomerById(UserId);
            goal = UserSelected.Goal;
            birthDay = UserSelected.Birthday;
        }
        else
        {
            UserSelected = _dbUsers.GetPersonalById(UserId);
        }


    }


    private void OnChanged()
    {
        // UserSelected.Birthday = birthDay.Value;
        if (string.IsNullOrEmpty(UserSelected.Name))
        {
            hasError = true;
            return;
        }
        else
        {
            hasError = false;
        }
        if (IsCustomer)
        {
            _dbUsers.UpdateCustomer(UserSelected);
        }
        else
        {
            _dbUsers.UpdatePersonal(UserSelected);
        }
        StateHasChanged();
    }

    private void OnChangedDate(DateTime? newDate)
    {
        UserSelected.Birthday = newDate.Value;
        if (IsCustomer)
        {
            _dbUsers.UpdateCustomer(UserSelected);
        }
        else
        {
            _dbUsers.UpdatePersonal(UserSelected);
        }

    }

    protected override void OnParametersSet()
    {
        // UserSelected = _dbUsers.GetCustomerById(UserId);
        // goal = UserSelected.Goal;
        // birthDay = UserSelected.Birthday;
        if (IsCustomer)
        {
            UserSelected = _dbUsers.GetCustomerById(UserId);
            goal = UserSelected.Goal;
            birthDay = UserSelected.Birthday;
        }
        else
        {
            UserSelected = _dbUsers.GetPersonalById(UserId);
        }
    }
}
