@using MudBlazor
@using TrainningApp.Core.DTO.Exercise
@using TrainningApp.Core.DTO.Muscle
@using TrainningApp.Core.DTO.TrainningExercise
@using TrainningApp.Core.Entities
@using TrainningApp.Core.StaticMethods
@using TrainningDeploy.Components
@inject DbMusclesAndExercises _dbMusclesAndExercise

<MudDialog MaxWidth="MaxWidth.ExtraLarge" FullWidth="true" Class="custom-dialog rounded-lg">
    <DialogContent>

        @if (set > 4) {
            dialogScreen = "620px";
        }

        @if (!musclesList.Select(x => x.Name).Contains(muscleSelected))
        {
            exerciseList = exerciseListCopy;
        }
        <div class="d-flex flex-column py-1" style="min-height: @dialogScreen;">
            <MudAutocomplete T="string" Label="Filtro por músculo" @bind-Value="muscleSelected" SearchFunc="@SearchByMuscle"
                             MaxItems="50"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" />

            <MudAutocomplete T="ExerciseVO"
                             Label="Exercício"
                             @bind-Value="exerciseVO"
                             SearchFunc="@SearchExercise"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             MaxItems="50"
                             CoerceText="@coerceText"
                             CoerceValue="@coerceValue"
                             HelperText="@(hasError ? errorMessage : null)"
                             Error="@hasError"
                             TextChanged="Verification">
            </MudAutocomplete>

            @if (hasError)
            {
                <MudText Color="Color.Error" Typo="Typo.caption">@errorMessage</MudText>
            }

            <MudNumericField Label="Intervalo entre séries (seg)"
                             @bind-Value="rest"
                             Max="9"
                             Min="0"
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Style="width: 80px; height: 40px; padding-top: 6px;" />


            <div class="d-flex flex-row align-items-center" >
                <MudNumericField Label="Série" @bind-Value="set" Max="9" Min="0" Variant="Variant.Outlined" Style="width: 80px; height: 30px;" />
                <MudTextField Label="Repetições" @bind-Value="reps[0]" />
                <MudNumericField Label="Série"
                                 @bind-Value="set"
                                 Max="9"
                                 Min="0"
                                 Variant="Variant.Outlined"
                                 Style="width: 80px; height: 30px;"
                                 Class="invisible" />
                <MudTextField Label="Carga" @bind-Value="weights[0]" />
            </div>
            @if(set > 1)
            {
                ExerciseCorrectionRepsAndWeights(set);
                @for (int i = 1; i < set; i++)
                {

                    <ExerciseInput Index="i"
                                   Rep="reps"
                                   Weight="weights"
                                   OnRepSave="OnRepSave"
                                   OnWeightSave="OnWeightSave" />


                }
            }
            
            <MudTextField Label="Observação" @bind-Value="observation" />
            <MudTooltip Text="Este exercício não possui Video" Disabled="@ShowTooltip">
            <br/>
            <br/>
            <MudButton OnClick="OpenVideo" Variant="Variant.Filled" Disabled="exerciseNotHasVideo" Color="Color.Secondary" Style="margin-right: 20px;">Visualizar Exercício</MudButton>
            </MudTooltip>
            @if(videoOn == true)
            {
                <div class="d-flex justify-content-center align-items-center mt-3">
                    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; width: 640px;">
                        @* <iframe src="@exerciseList.FirstOrDefault().Video" *@
                        <iframe src="@exerciseVO.Video"
                                style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
                                frameborder="0"
                                allowfullscreen>
                        </iframe>
                    </div>
                </div>
            }
            
        </div>
    </DialogContent>
    <DialogActions>
        @if (EditExercise == null)
        {
            <MudButton Variant="Variant.Filled" OnClick="AddNewExercise" Color="Color.Success">Adicionar</MudButton>
        }
        @if (EditExercise != null)
        {
            <MudButton Variant="Variant.Filled" OnClick="EditNewExercise" Color="Color.Success">Editar</MudButton>
        }
        

        <MudButton Color="Color.Primary" OnClick="Close">Fechar</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .custom-dialog {
        max-width: 800px;
        margin: 20px auto; 
        width: 90%; 
    }
</style>

@code {
    List<ExerciseVO> exerciseList = new List<ExerciseVO>();
    List<ExerciseVO> exerciseListCopy = new List<ExerciseVO>();
    List<MuscleVO> musclesList = new List<MuscleVO>();


    [Parameter]
    public bool EditExibition { get; set; }

    [Parameter]
    public TrainningExerciseVO EditExercise { get; set; }  




    private void OnRepSave(List<string> reptitions)
    {
        reps = reptitions.ToList();

    }

    private void OnWeightSave(List<string> weightsList)
    {

        weights = weightsList.ToList();
    }

    private bool ValidateSelection()
    {
        if (exerciseVO == null || exerciseVO.Id == 0 || exerciseVO.Name == null)
        {
            hasError = true;
            return hasError;
        }
        else
        {
            hasError = false;
            return hasError;
        }
    }
    public TrainningExerciseVO trainningExerciseVO;


    [Parameter]
    public EventCallback<TrainningExerciseVO> OnAddExercise { get; set; }


    [Parameter]
    public EventCallback<TrainningExerciseVO> OnEditExercise { get; set; }

    private string errorMessage = "Seleção de exercício obrigatória!";
    private bool hasError = false;
    private string[] array = new string[5];
    private int rest;
    private bool ShowTooltip => !exerciseNotHasVideo;
    private bool videoOn = false;
    private bool exerciseNotHasVideo = true;
    private string dialogScreen = "420px";
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string exerciseSelected; // Corrigido: adicione o ponto e vírgula
    private string muscleSelected;
    private int set = 1;
    private string observation;
    private List<string> reps = new List<string> { "", "", "", "", "" };
    private List<string> weights = new List<string> { "", "", "", "", "" };
    // private List<string> weights = new List<string> { "", "", "", "", "" };
    ExerciseVO exerciseVO = new ExerciseVO();
    MuscleVO muscleVO = new MuscleVO();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    private void Close() {
        MudDialog.Close();
    }




    private void OpenVideo()
    {
        // videoOn = true;
        videoOn = videoOn == false ? true : false;
        /* https://www.youtube.com/watch?v=GiAWATi5D0U
        https://www.youtube.com/embed/GiAWATi5D0U */
        if (!exerciseVO.Video.Contains("embed"))
        {
            exerciseVO.Video = StaticMethods.ConvertToEmbedUrl(exerciseVO.Video);
        }
       
        /* exerciseVO.Video = exerciseVO.Video.Replace("watch?v=", "embed/"); */
        // ExerciseVO exerciseVO = exerciseList.FirstOrDefault();
        StateHasChanged();
    }

    private async Task EditNewExercise()
    {
        bool verification = ValidateSelection();
        if (verification)
        {

            return;
        }
        trainningExerciseVO = new TrainningExerciseVO
            {
                Id = EditExercise.Id,
                ExerciseId = exerciseVO.Id,
                ExerciseName = exerciseVO.Name,
                Reps = string.Join("/", reps),
                // Reps = array[1],
                Interval = rest,
                Weight = string.Join("/", weights),
                Info = observation,
                Set = set,
                Ordenation = EditExercise.Ordenation

            };

        // Chame o EventCallback passando o trainningExercise

        await OnEditExercise.InvokeAsync(trainningExerciseVO);

        // Feche o diálogo
        // MudDialog.Close();
        MudDialog.Close(DialogResult.Ok(trainningExerciseVO));
    }

    private async Task AddNewExercise()
    {
        bool verification = ValidateSelection();
        if (verification)
        {

            return;
        }
        trainningExerciseVO = new TrainningExerciseVO
            {
                ExerciseId = exerciseVO.Id,
                ExerciseName = exerciseVO.Name,
                Reps = string.Join("/", reps),
                // Reps = array[1],
                Interval = rest,
                Weight = string.Join("/", weights),
                Info = observation,
                Set = set,


            };

        // Chame o EventCallback passando o trainningExercise

        await OnAddExercise.InvokeAsync(trainningExerciseVO);

        // Feche o diálogo
        // MudDialog.Close();
        MudDialog.Close(DialogResult.Ok(trainningExerciseVO));
    }

   

    protected override void OnInitialized()
    {
        exerciseList = _dbMusclesAndExercise.ExercisesToDTO();
        exerciseListCopy = exerciseList.ToList();
        musclesList = _dbMusclesAndExercise.MuscleToDTO();



        if (EditExercise != null)
        {
            List<string> numbersReps = new List<string> { "", "", "", "", "" };
            List<string> numbersWeights = new List<string> { "", "", "", "", "" };

            if (EditExercise.Reps != null) numbersReps = EditExercise.Reps.Split('/')
                            .Where(x => !string.IsNullOrEmpty(x))
                            .ToList();

            if (EditExercise.Weight != null) numbersWeights = EditExercise.Weight.Split('/')
            .Where(x => !string.IsNullOrEmpty(x))
            .ToList();

            if (numbersReps.Count == 0) numbersReps = new List<string> { "", "", "", "", "" };
            if (numbersWeights.Count == 0) numbersWeights = new List<string> { "", "", "", "", "" };

            ExerciseVO exerciseDb = _dbMusclesAndExercise.GetExerciseById(EditExercise.ExerciseId);

            exerciseVO = exerciseDb;
            set = EditExercise.Set;
            reps = numbersReps;
            exerciseSelected = EditExercise.ExerciseName != null ? EditExercise.ExerciseName : string.Empty;
            rest = EditExercise.Interval;
            weights = numbersWeights;
            observation = EditExercise.Info != null ? EditExercise.Info : string.Empty;

            if (exerciseDb.Video != null && exerciseDb.Video != string.Empty)
            {
                exerciseNotHasVideo = false;
                StateHasChanged();
            }
            else
            {
                exerciseNotHasVideo = true;
                StateHasChanged();
            }
        }
    }

    private void ExerciseCorrectionRepsAndWeights(int setCount)
    {
        if(reps.Count < setCount)
        {
            while(reps.Count < setCount)
            {
                reps.Add(string.Empty);
            }
        }
        if (weights.Count < setCount)
        {
            while (weights.Count < setCount)
            {
                weights.Add(string.Empty);
            }
        }
    }

    private void Verification()
    {

        if (exerciseVO.Video != null && exerciseVO.Video != string.Empty)
        {
            exerciseNotHasVideo = false;
            StateHasChanged();
        }
        else
        {
            exerciseNotHasVideo = true;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<ExerciseVO>> SearchExercise(string value, CancellationToken token)
    {
        videoOn = false;
        exerciseList = exerciseListCopy;
        await Task.Delay(5, token); // Simulação de chamada assíncrona

        MuscleVO muscleVO = musclesList.Where(x => x.Name == muscleSelected).FirstOrDefault();

        if (muscleVO != null)
            exerciseList = exerciseList.Where(x => x.Muscles.Contains(muscleVO.Name)).ToList();

        if (string.IsNullOrEmpty(value))
            return exerciseList;

        var filteredList = exerciseList.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();

        ExerciseVO selectedExercise = filteredList.FirstOrDefault(x => x.Name == value);
        if (selectedExercise != null)
        {
            exerciseVO = selectedExercise;
            if (string.IsNullOrEmpty(selectedExercise.Video))
                exerciseNotHasVideo = true;
            else
                exerciseNotHasVideo = false;
        }
        StateHasChanged();
        return filteredList;
    }



    private async Task<IEnumerable<string>> SearchByMuscle(string value, CancellationToken token)
    {
        await Task.Delay(5, token); // Simulação de chamada assíncrona
        if (string.IsNullOrEmpty(value))
        {
            muscleSelected = string.Empty;
            exerciseList = exerciseListCopy.ToList();
            return musclesList.Select(x => x.Name).ToList();
        }     
        
     

        if (musclesList.Select(x => x.Name).Where(x => x == value).ToList() == null)
        {
            exerciseList = exerciseListCopy;
        }
        return musclesList.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    protected override void OnParametersSet()
    {
        var selectedMuscle = musclesList.FirstOrDefault(x => x.Name == muscleSelected);
        if (selectedMuscle != null)
        {
            exerciseList = exerciseList.Where(x => x.Muscles.Contains(selectedMuscle.Name)).ToList();
        }
    }

   
}
