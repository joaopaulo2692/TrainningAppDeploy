@page "/drag-and-drop"
@using TrainningApp.Core.DTO.TrainningExercise
@inject IJSRuntime JS

@* <div id="sortable-list" class="sortable-container">
    @foreach (var item in exercises)
    {
        <MudPaper Class="pa-4 my-4 d-flex align-items-center justify-content-between" Style="width: 100%;" data-id="@item.Ordenation">
            <MudTextField ShrinkLabel @bind-Value="item.ExerciseName" Label="Exercício" Variant="Variant.Text" Style="max-width: 200px; height: 32px; font-size: 0.875rem; margin-right: 20px;" />
             <MudTextField ShrinkLabel @bind-Value="item.Set" Label="Série" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Reps" Label="Rep" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Weight" Label="Carga" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Interval" Label="Intervalo" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Info" Label="Info" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />

             <MudButton Variant="Variant.Filled" Color="Color.Warning" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                 Editar
             </MudButton>
             <MudButton Variant="Variant.Filled" Color="Color.Error" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                 Deletar
             </MudButton>
         </MudPaper>
    }
</div> *@

<div id="sortable-list" class="sortable-container parent-container" style="display: flex; justify-content: center; align-items: center; width: 100%; height: auto;">
    <h3>Sessões do treino</h3>
    @foreach (var item in exercises)
    {
        <MudPaper Class="custom-size pa-6 ma-2" data-id="@item.Ordenation" Style="display: flex; align-items: center; gap: 16px; flex-wrap: nowrap; max-width: 70%; width: 70%">
 
            <!-- Campo Exercício -->
            <MudTextField ShrinkLabel @bind-Value="item.ExerciseName" Label="Exercício" Variant="Variant.Text"
                           Style="max-width: 200px; height: 32px; font-size: 0.875rem;" />
                 <div class="extra-fields">
             <!-- Demais Campos -->
             <MudTextField ShrinkLabel @bind-Value="item.Set" Label="Série" Variant="Variant.Text"
                           Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Reps" Label="Rep" Variant="Variant.Text"
                           Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Weight" Label="Carga" Variant="Variant.Text"
                           Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Interval" Label="Intervalo" Variant="Variant.Text"
                           Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Info" Label="Info" Variant="Variant.Text"
                           Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
            </div>
             <!-- Botões -->
             <MudButton Variant="Variant.Filled" Color="Color.Warning"
                        Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px;">
                 Editar
             </MudButton>
             <MudButton Variant="Variant.Filled" Color="Color.Error"
                        Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px;">
                 Deletar
             </MudButton>
         </MudPaper>

    }
</div>

<style>
.extra-fields {
    display: flex;
    gap: 8px;
    flex-wrap: nowrap; /* Evita quebra de linha */
    align-items: center; /* Alinha os campos verticalmente */
}
@*     /* Estilo geral */
    .exercise-item {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
        width: 100%;
        margin-bottom: 8px;
        padding: 6px; /* Adiciona espaçamento interno ao MudPaper */
        /*border: 1px solid #ddd;*/ /* Opcional: borda para melhor visualização */
        border-radius: 4px; /* Deixa as bordas arredondadas */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Adiciona leve sombra */
    }

    /* Campo Exercício */
    .exercise-field {
        flex: 1;
        max-width: 200px;
    }

    /* Campos adicionais */
    .extra-fields {
        display: flex;
        gap: 8px;
        flex: 3;
    }

    .small-field {
        max-width: 100px;
    }

    /* Botões */
    .buttons {
        display: flex;
        gap: 4px;
    }

    .custom-size {
        display: flex;
        align-items: center;
        gap: 8x; /* Espaçamento entre os itens */
        flex-wrap: nowrap; /* Evita quebra de linha */
    }

        .custom-size .action-button {
            font-size: 0.75rem;
            padding: 4px 8px;
            min-width: auto;
            height: 32px;
        }


    /* Ajusta layout para exibir apenas Exercício e botões */
    .exercise-item {
        flex-wrap: nowrap;
        justify-content: space-between;
    }

    .exercise-field {
        flex: 1;
        max-width: 100%; /* Campo Exercício ocupa toda a largura possível */
    }

    .buttons {
        justify-content: flex-end;
        flex: none;
    } *@
</style>






<button class="btn btn-primary mt-3" @onclick="RefazerOrdem">Refazer Ordem</button>

@code {
    public List<TrainningExerciseVO> exercises = new List<TrainningExerciseVO>();

    private DotNetObjectReference<Teste> _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeSortable", _objectReference);
        }
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }

    private async Task RefazerOrdem()
    {
        // Chama o método JavaScript para refazer a ordem e atualizar a lista
        await JS.InvokeVoidAsync("updateSortableOrder", "sortable-list");
    }

    protected override void OnInitialized()
    {
        exercises = new List<TrainningExerciseVO>
        {
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino", Info = "Normal", Ordenation = 1 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino reto", Info = "Normal", Ordenation = 2 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino inclinado", Info = "Normal", Ordenation = 3 }
        };
    }

    [JSInvokableAttribute]
    public void UpdateOrdenation(string[] newOrder)
    {
        for (int i = 0; i < newOrder.Length; i++)
        {
            var item = exercises.FirstOrDefault(x => x.Ordenation.ToString() == newOrder[i]);
            if (item != null)
            {
                item.Ordenation = i + 1; // Atualiza a ordenação
            }
        }

        // Reordena a lista na memória
        exercises = exercises.OrderBy(x => x.Ordenation).ToList();

        // Atualiza a interface
        StateHasChanged();
    }
}
