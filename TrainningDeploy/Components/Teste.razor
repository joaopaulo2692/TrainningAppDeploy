@page "/drag-and-drop"
@using TrainningApp.Core.DTO.TrainningExercise
@inject IJSRuntime JS

<div id="sortable-list" class="sortable-container">
    @foreach (var item in exercises)
    {
        <MudPaper Class="pa-4 my-4 d-flex align-items-center justify-content-between" Style="width: 100%;" data-id="@item.Ordenation">
            <MudTextField ShrinkLabel @bind-Value="item.ExerciseName" Label="Exercício" Variant="Variant.Text" Style="max-width: 200px; height: 32px; font-size: 0.875rem; margin-right: 20px;" />
             <MudTextField ShrinkLabel @bind-Value="item.Set" Label="Série" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Reps" Label="Rep" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Weight" Label="Carga" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Interval" Label="Intervalo" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
             <MudTextField ShrinkLabel @bind-Value="item.Info" Label="Info" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />

             <MudButton Variant="Variant.Filled" Color="Color.Warning" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                 Editar
             </MudButton>

             <MudButton Variant="Variant.Filled" Color="Color.Error" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                 Deletar
             </MudButton>
         </MudPaper>
    }
</div>

<button class="btn btn-primary mt-3" @onclick="RefazerOrdem">Refazer Ordem</button>

@code {
    public List<TrainningExerciseVO> exercises = new List<TrainningExerciseVO>();

    private DotNetObjectReference<Teste> _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeSortable", _objectReference);
        }
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }

    private async Task RefazerOrdem()
    {
        // Chama o método JavaScript para refazer a ordem e atualizar a lista
        await JS.InvokeVoidAsync("updateSortableOrder", "sortable-list");
    }

    protected override void OnInitialized()
    {
        exercises = new List<TrainningExerciseVO>
        {
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino", Info = "Normal", Ordenation = 1 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino reto", Info = "Normal", Ordenation = 2 },
            new TrainningExerciseVO { Reps = "10", Set = 3, ExerciseName = "Supino inclinado", Info = "Normal", Ordenation = 3 }
        };
    }

    [JSInvokableAttribute]
    public void UpdateOrdenation(string[] newOrder)
    {
        for (int i = 0; i < newOrder.Length; i++)
        {
            var item = exercises.FirstOrDefault(x => x.Ordenation.ToString() == newOrder[i]);
            if (item != null)
            {
                item.Ordenation = i + 1; // Atualiza a ordenação
            }
        }

        // Reordena a lista na memória
        exercises = exercises.OrderBy(x => x.Ordenation).ToList();

        // Atualiza a interface
        StateHasChanged();
    }
}
