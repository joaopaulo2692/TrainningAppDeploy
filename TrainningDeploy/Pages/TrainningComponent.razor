@inject IDialogService DialogService
@using TrainningApp.Core.DTO.Trainning
@using TrainningApp.Core.DTO.TrainningDay
@using TrainningApp.Core.DTO.TrainningExercise

@using TrainningApp.Core.Entities
@using TrainningDeploy.Components
@using TrainningDeploy.Layout
@inject DbTrainningDay _trainningDay
@inject DbTrainning _trainning
@* @inject DbTrainningExercise _trainningExercise *@



@page "/aluno/{UserId}/treinos/{TrainningId:int}"
@page "/treinos/{TrainningId:int}"


@if(UserId != null)
{
    <CustomerInfoComponent UserId="@UserId" ActiveIndex="1"></CustomerInfoComponent>
}


<TrainningInfoBasicComponent IsLibrary="IsLibrary" TrainningToSave="HandleInfoTrainning" TrainningVO="TrainningToEdit"></TrainningInfoBasicComponent>


@if(TrainningToEdit != null)
{
    <h3 style="display: flex; justify-content: center; align-items: center; width: 100%; height: auto;">Sessões do treino </h3>
<div style="display: flex; justify-content: center; align-items: center; width: 100%; height: auto;">
    <MudTabs @bind-ActivePanelIndex="_selectedTabIndex" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0" @key="_uniqueKey" Class="dropzone-small">
        @foreach (var trainningDay in TrainningToEdit.TrainningDays)
        {
            <MudTabPanel  Text="@trainningDay.Name" Key="@trainningDay.GetHashCode()">

                <TrainningDaysComponent  OnModification="UpdateTrainningGetById" ParameterTrainningDay=trainningDay.Id ParameterTrainningExercises=trainningDay.TrainningExercises OnRemoveTrainningDay="HandleRemoveTrainningDay"></TrainningDaysComponent>
            </MudTabPanel>
        }

        <MudTabPanel Text="Adicionar Sessão" OnClick="() => AddNewTrainningDay()">

            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small">Salvar Treino</MudButton>
        </MudTabPanel>
    </MudTabs>
</div>
}








<style>


    .parent-container {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
        align-items: flex-start; /* Alinha o conteúdo ao topo */
        flex-direction: column; /* Garante que os itens sejam empilhados verticalmente */
        width: 100%; /* Largura total disponível */
        height: auto; /* Altura será definida pelo conteúdo */
        padding: 20px; /* Adicione um espaçamento interno, se necessário */
    }


 @*    .dropzone-small {
        width: 68%; /* Ajusta para 100% da largura do contêiner */
        max-width: 1400px; /* Limite máximo de largura */
        /* height: 700px; /* Altura fixa */ */ padding: 16px;
        margin: 10px;
    } *@
    .dropzone-small {
    width: 68%; /* Ajusta para 68% da largura do contêiner */
    max-width: 1400px; /* Limite máximo de largura */
    padding: 0px;
    margin: 10px;
}

</style>

@code {
    [Parameter]
    public int TrainningId { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public TrainningReturnVO TrainningToEdit { get; set; }

    public bool IsLibrary { get; set; }

    private TrainningReturnVO TrainningVO { get; set; }
    [Parameter]
    public EventCallback<TrainningReturnVO> TrainningToUpdateOrCreate { get; set; }

    private int _selectedTabIndex = 0;
    private int _uniqueKey = 0;
    public string Exercicio { get; set; }
    public string Serie { get; set; }
    private int SelectedTabIndex { get; set; }
    public Position Position { get; set; } = Position.Left;

    private void AddNewTrainningDay()
    {
        //     string letter = DropzoneList.Select(x => x.Select(x => x.Name)).Last().FirstOrDefault();
        //     // char currentLetter = 'C';
        //     char currentLetter = letter[0];
        //     char nextLetter = (char)(currentLetter + 1);
        //     DropzoneList.Add(new List<DropZoneItem>
        // {
        //     new DropZoneItem
        //     {
        //         Zone = "Drop Zone 1",
        //         TrainningDayOrdenation = 3,
        //         TrainningDayId = 3,
        //         // Name = "C",
        //         Name = nextLetter.ToString(),

        //     }
        // });
        char trainningLetter = TrainningToEdit.TrainningDays.Max(x => x.Name).FirstOrDefault();
        TrainningDayReturnVO lastTrainning = TrainningToEdit.TrainningDays.LastOrDefault();
        trainningLetter++;

        TrainningDay trainningDay = _trainningDay.AddNewTrainningDay(trainningLetter.ToString(), TrainningId);
        _trainning.AddTrainningDay(trainningDay, TrainningId);
        TrainningToEdit = _trainning.GetById(TrainningId);
        // TrainningToEdit = _trainning.GetById(TrainningToEdit.Id);
        // TrainningToEdit.TrainningDays.Add(new TrainningDayReturnVO() { Name = trainningLetter.ToString(), Ordenation = lastTrainning.Ordenation + 1, TrainningExercises = new List<TrainningExerciseVO>()});


        _uniqueKey++;
    }

    private void UpdateTrainningGetById()
    {
        TrainningToEdit = _trainning.GetById(TrainningToEdit.Id);
    }

    private void OnEditExercise()
    {

    }

    private async Task HandleInfoTrainning(TrainningReturnVO trainningToSave)
    {
        if (TrainningVO == null) TrainningVO = new TrainningReturnVO();
        TrainningVO.PersonalName = trainningToSave.PersonalName;
        TrainningVO.Observation = trainningToSave.Observation;
        TrainningVO.Goal = trainningToSave.Goal;
        TrainningVO.FrequencyWeekly = trainningToSave.FrequencyWeekly;
        TrainningVO.Name = trainningToSave.Name;
        TrainningVO.Activate = trainningToSave.Activate;
        TrainningVO.PersonalName = trainningToSave.PersonalName;

    }

    private async Task OnSaveTrainning()
    {

        if (TrainningVO == null) TrainningVO = new TrainningReturnVO();
        TrainningVO.CreatedAt = DateTime.Now;
        TrainningVO.TrainningDays = new List<TrainningDayReturnVO>();
        // TrainningVO.TrainningDays = DropzoneList.SelectMany(x => x.Select(x => x.TrainningDayReturn)).ToList();

        // foreach (var drop in DropzoneList)
        // {
        //     foreach(var trainningList in drop)
        //     {
        //         TrainningVO.TrainningDays.Add(trainningList.TrainningDayReturn);
        //     }
        // }

        if (TrainningToEdit != null) TrainningVO.Id = TrainningToEdit.Id;

        TrainningToUpdateOrCreate.InvokeAsync(TrainningVO);
    }

    // private async Task HandleChangeOrdenationExercise(List<DropZoneItem> dropNewOrdenation)
    // {
    //     // Procurar a sublista que contém o item com o 'Name' desejado
    //     var targetSublist = DropzoneList
    //         .FirstOrDefault(sublist => sublist.Any(x => x.Name == dropNewOrdenation[0].Name));

    //     // Se a sublista foi encontrada
    //     if (targetSublist != null)
    //     {
    //         int contIndex = 0;
    //         // Usar LINQ para encontrar e atualizar o item desejado dentro da sublista
    //         targetSublist
    //             .Where(x => x.Name == dropNewOrdenation[0].Name)
    //             .ToList() // Usando ToList() para que a operação de atualização seja realizada no item
    //             .ForEach(item =>
    //             {
    //                 // Substituindo as propriedades do item
    //                 item.Exercise.Ordenation = dropNewOrdenation[contIndex].Exercise.Ordenation;
    //                 item.Exercise.Set = dropNewOrdenation[contIndex].Exercise.Set;
    //                 item.Exercise.Reps = dropNewOrdenation[contIndex].Exercise.Reps;
    //                 item.Exercise.Info = dropNewOrdenation[contIndex].Exercise.Info;
    //                 item.Exercise.Weight = dropNewOrdenation[contIndex].Exercise.Weight;
    //                 item.Exercise.ExerciseId = dropNewOrdenation[contIndex].Exercise.ExerciseId;
    //                 item.Exercise.ExerciseName = dropNewOrdenation[contIndex].Exercise.ExerciseName;
    //                 item.Exercise.TrainningDayId = dropNewOrdenation[contIndex].Exercise.TrainningDayId;
    //                 item.Exercise.Interval = dropNewOrdenation[contIndex].Exercise.Interval;
    //                 // Adicione mais atualizações conforme necessário
    //                 contIndex++;
    //             });
    //     }

    //     // Atualizar chave única, se necessário
    //     _uniqueKey++;
    // }




    private async Task HandleRemoveTrainningDay(int trainningDayIdToRemove)
    {
        TrainningDayReturnVO trainningDay = TrainningToEdit.TrainningDays.Where(x => x.Id == trainningDayIdToRemove).FirstOrDefault();

        _trainningDay.RemoveById(trainningDayIdToRemove);
        TrainningToEdit = _trainning.GetById(TrainningToEdit.Id);
        StateHasChanged();


    }

    // private async Task HandleAddExercise(DropZoneItem newExercise)
    // {
    //     int cont = 0;
    //     foreach (var sublist in DropzoneList)
    //     {

    //         if (sublist.Any(x => x.Name == newExercise.Name))
    //         {
    //             if (sublist[0].Exercise == null)
    //             {
    //                 sublist[0] = newExercise;
    //                 break;
    //             }
    //             sublist.Add(newExercise);
    //             break;
    //         }
    //         cont++;
    //     }
    //     DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
    //     _uniqueKey++;
    //     _selectedTabIndex = cont;
    //     await InvokeAsync(StateHasChanged);
    // }

    // private async Task HandleRemoveExercise(DropZoneItem removeExercise)
    // {
    //     int cont = 0;
    //     bool hasToBreak = false;
    //     foreach (var sublist in DropzoneList)
    //     {
    //         foreach (var exercise in sublist)
    //         {
    //             if (removeExercise == exercise && sublist.Count > 1)
    //             {
    //                 sublist.Remove(exercise);
    //                 hasToBreak = true;
    //                 break;
    //             }
    //             else if (removeExercise == exercise && sublist.Count == 1)
    //             {
    //                 exercise.Exercise = null;
    //                 hasToBreak = true;
    //                 break;
    //             }
    //         }
    //         if (hasToBreak) break;
    //         cont++;
    //     }

    //     DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
    //     _uniqueKey++;
    //     _selectedTabIndex = cont;
    //     await InvokeAsync(StateHasChanged);
    // }

    // private async Task HandleEditExercise(DropZoneItem editedExercise)
    // {
    //     int cont = 0;
    //     bool hasToBreak = false;
    //     foreach (var sublist in DropzoneList)
    //     {
    //         foreach (var exercise in sublist)
    //         {
    //             if (exercise.Name == editedExercise.Name)
    //             {
    //                 if (editedExercise.Exercise.Ordenation == exercise.Exercise.Ordenation)
    //                 {
    //                     exercise.Exercise = editedExercise.Exercise;
    //                     hasToBreak = true;
    //                     break;
    //                 }
    //             }
    //         }
    //         if (hasToBreak) break;
    //         cont++;
    //     }

    //     _uniqueKey++;
    //     _selectedTabIndex = cont;
    //     await InvokeAsync(StateHasChanged);
    // }

    // List<TrainningDayReturnVO> trainningDayReturnList = new List<TrainningDayReturnVO>();
    List<TrainningExerciseVO> exercises = new List<TrainningExerciseVO>()
    {
        new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino",
            Info = "Normal",
            Ordenation = 1
        },
         new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino reto",
            Info = "Normal",
            Ordenation = 2
        },
         new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino inclinado",
            Info = "Normal",
            Ordenation = 2
        }
    };



    TrainningDay trainningDay = new TrainningDay();





    protected override void OnParametersSet()
    {
        StateHasChanged(); // Força atualização ao receber novos parâmetros
    }


    protected override void OnInitialized()
    {

        TrainningToEdit = _trainning.TrainningToTrainningVO(_trainning.Trainnings.Where(x => x.Id == TrainningId).FirstOrDefault());
        StateHasChanged();

        if (string.IsNullOrEmpty(UserId))
        {
            IsLibrary = true;
        }

        if(TrainningToEdit.TrainningDays.Count == null || TrainningToEdit.TrainningDays.Count == 0)
        {
          
        
        
            TrainningDay trainningDay = _trainningDay.AddNewTrainningDay("A", TrainningToEdit.Id);
            _trainning.AddTrainningDay(trainningDay, TrainningId);
            TrainningToEdit = _trainning.GetById(TrainningId);
            // TrainningToEdit.TrainningDays = new List<TrainningDayReturnVO>()
            //     {
            //         _trainningDay.TrainningDayToVO(trainningDay)
            //     };
            // TrainningToEdit = new TrainningReturnVO()
            //     {
            //         Id = TrainningToEdit.Id,
            //         TrainningDays = new List<TrainningDayReturnVO>()
            //     {
            //         new TrainningDayReturnVO()
            //         {
            //             Name = "A",
            //             Ordenation = 1,
            //             TrainningExercises = new List<TrainningExerciseVO>(),
            //         }
            //     }
            //     };
        }
        

    }

  

}
