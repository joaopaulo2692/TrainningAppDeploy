@page "/alunos"
@inject NavigationManager NavigationManager
@using TrainningApp.Core.Constants
@using TrainningApp.Core.DTO.User
@using TrainningApp.Core.Entities
@inject DbUsers _dbUsers


<div style="display: flex; justify-content: center;">
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddNewCustumer">Novo Usuário</MudButton>
</div>
<br />
<br />
<br />



<div style="display: flex; justify-content: center; width: 100%;">
    <MudPaper Class="custom-size" Width="75%" Style="padding: 20px; display: flex; flex-direction: column; position: relative; overflow-y: auto; box-sizing: border-box;">
        @foreach (var user in users)
        {
            <MudGrid AlignItems="AlignItems.Center" Class="profile-container hover-container" Style="display: flex; flex-wrap: wrap; width: calc(100% + 40px); margin-right: -20px;">
                <MudItem Style="flex-shrink: 0; margin-right: 10px;">
                    <MudAvatar Size="Size.Medium" Image="https://via.placeholder.com/150" Class="mb-2" />
                </MudItem>

                <MudItem Class="profile-text" Style="flex-grow: 1;">
                    <MudText Typo="Typo.h6" Class="font-weight-bold">@user.Name</MudText>
                        <MudText Typo="Typo.body2" Class="text-muted">@user.Age anos, @user.Gender</MudText>
                    </MudItem>

                    <MudItem Style="flex-shrink: 0;">
                        <div class="action-icons">
                            <MudIconButton OnClick="() => NavigateToEditPage(user.Id)" Icon="@Icons.Material.Outlined.Edit" />
                        </div>
                    </MudItem>
                </MudGrid>
            <MudDivider Class="my-4" />
        }
    </MudPaper>

</div>

<style>
    .custom-size {
        width: 75%;
        max-width: 100%;
        transition: width 0.3s ease;
        min-height: 400px; /* Altura mínima para não ficar muito pequeno em telas grandes */
        box-sizing: border-box; /* Garante que o padding não afete o tamanho */
    }

    .profile-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%; /* Garante que o MudGrid ocupe 100% da largura disponível */
        box-sizing: border-box; /* Garante que o padding do MudPaper não afete o layout */
        position: relative; /* Evita deslocamento inesperado */
    }

    .hover-container .action-icons {
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .hover-container:hover .action-icons {
        visibility: visible;
        opacity: 1;
    }

    /* Adiciona efeito de hover ao container */
    .hover-container {
        transition: background-color 0.3s ease;
        position: relative; /* Para evitar deslocamento */
    }

        .hover-container:hover {
             /* background-color: #2a2a3d;   */
            background-color: rgba(42, 42, 61, 0.2); 
       

            cursor: pointer;
        }



    }
</style>



@code {
    List<UserVO> users = new List<UserVO>();

    private void AddNewCustumer()
    {
        string id = _dbUsers.AddNewCustomer();
        NavigateToEditPage(id);
    }

    private void NavigateToEditPage(string user)
    {
        string url = Constants.GetUrlForCustomer(user);
        NavigationManager.NavigateTo(url); // Substitua "/edit-page" pela rota desejada
    }
    protected override void OnInitialized()
    {
        List<ApplicationUser> appUser = _dbUsers.Customers.ToList();
        users = _dbUsers.UsersToDTO(appUser);
        //         users = new List<UserVO>()
// {
//     new UserVO()
//     {
//         Name = "João",
//         Age = 32,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Letícia",
//         Age = 27,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Carlos",
//         Age = 45,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Mariana",
//         Age = 22,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Pedro",
//         Age = 38,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Sofia",
//         Age = 29,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Gabriel",
//         Age = 34,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Ana",
//         Age = 24,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Lucas",
//         Age = 31,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Camila",
//         Age = 28,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Ricardo",
//         Age = 41,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Beatriz",
//         Age = 26,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Mateus",
//         Age = 35,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Larissa",
//         Age = 30,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Felipe",
//         Age = 39,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Isabela",
//         Age = 25,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "Thiago",
//         Age = 37,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Patrícia",
//         Age = 33,
//         Gender = "Feminino"
//     },
//     new UserVO()
//     {
//         Name = "André",
//         Age = 40,
//         Gender = "Masculino"
//     },
//     new UserVO()
//     {
//         Name = "Juliana",
//         Age = 36,
//         Gender = "Feminino"
//     }
// };
        users = users.OrderBy(x => x.Name).ToList();
    }
}
